name: CodeReview

on:
  pull_request:
    branches:
      - main
      - develop
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get git diff
        id: git_diff
        run: |
          git fetch origin ${{ github.event.pull_request.base.sha }}
          git fetch origin ${{ github.event.pull_request.head.sha }}
          git diff --unified=3 "origin/${{ github.event.pull_request.base.ref }}" "origin/${{ github.event.pull_request.head.ref }}" > diff.txt
          echo "DIFF_CONTENT<<EOF" >> $GITHUB_ENV
          cat diff.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send to LLM for review and format output
        id: llm_review
        run: |
          ESCAPED_DIFF=$(echo "$DIFF_CONTENT" | jq -sRr @json)

          PROMPT=$(jq -n --arg diff "$ESCAPED_DIFF" '
          "You are a senior software engineer performing a thorough code review.
          Given the following git diff, provide your review comments.
          For each issue you find:
            - Identify the file path.
            - Identify the specific line number in the new version of the file where the issue occurs.
              (Refer to hunk headers like '\''@@ -old_start,old_lines +new_start,new_lines @@'\'' to calculate the correct line number for added/modified lines).
            - Provide a concise review comment.
          Output your findings ONLY as a JSON array of objects. Each object MUST have the following keys:
          `path`: string (the full path to the file)
          `line`: number (the line number in the new version of the file)
          `body`: string (your review comment for that line)
          If no issues are found, output an empty JSON array: [].
          Do NOT include any other text, explanations, or markdown formatting outside of this JSON array.

          Here is the git diff:

          \($diff)"
          ')

          REQUEST_BODY=$(jq -n \
            --arg model "${{ secrets.REVIEW_MODEL_NAME }}" \
            --arg prompt "$PROMPT" \
            '{model: $model, prompt: $prompt, stream: false}'
          )

          RAW_RESPONSE=$(curl -s -X POST ${{ secrets.REVIEW_API_URL }} \
            -H "Content-Type: application/json" \
            -d "$REQUEST_BODY")

          POTENTIALLY_FENCED_JSON_STRING=$(echo "$RAW_RESPONSE" | jq -r .response)
          UNFENCED_JSON_STRING=$(echo "$POTENTIALLY_FENCED_JSON_STRING" | sed 's/^```json//;s/^```//;s/```$//')

          CLEANED_JSON=$(echo "$UNFENCED_JSON_STRING" | jq -c '
            if type == "array" then
              map(
                if type == "object" and has("path") and has("line") and has("body") then
                  {
                    path: (.path | tostring),
                    line: (.line | tonumber? // 0),
                    body: (.body | tostring)
                  }
                else
                  empty
                end
              )
            elif type == "string" and . == "[]" then
              []
            else
              []
            end
            | if . == null then [] else . end
          ')

          if ! echo "$CLEANED_JSON" | jq -e 'type == "array"' > /dev/null 2>&1; then
            CLEANED_JSON="[]"
          fi

          echo "Sanitized Comments JSON: $CLEANED_JSON"

          echo "REVIEW_COMMENTS_JSON<<EOF" >> $GITHUB_ENV
          echo "$CLEANED_JSON" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "comments_json=$CLEANED_JSON" >> $GITHUB_OUTPUT

      - name: Post review comments to PR
        uses: nbaztec/add-pr-review-comment@v1.0.7
        with:
          comments: ${{ steps.llm_review.outputs.comments_json }}
          repo-token: ${{ secrets.REVIEW_BOT_TOKEN }}
          allow-repeats: false
